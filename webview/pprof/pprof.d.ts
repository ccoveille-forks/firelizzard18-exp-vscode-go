interface Profile {
	SampleType: ValueType[];
	DefaultSampleType: string;
	Sample?: Sample[];
	Mapping?: Mapping[];
	Location?: Location[];
	Function?: Func[];
	Comments?: string[];
	DocURL: string;

	DropFrames: string;
	KeepFrames: string;

	TimeNanos: number;
	DurationNanos: number;
	PeriodType: ValueType;
	Period: number;
}

interface ValueType {
	Type: string; // cpu, wall, inuse_space, etc
	Unit: string; // seconds, nanoseconds, bytes, etc
}

interface Sample {
	Location: number[];
	Value: number[];
	// Label is a per-label-key map to values for string labels.
	//
	// In general, having multiple values for the given label key is strongly
	// discouraged - see docs for the sample label field in profile.proto.  The
	// main reason this unlikely state is tracked here is to make the
	// decoding->encoding roundtrip not lossy. But we expect that the value
	// slices present in this map are always of length 1.
	Label: Record<string, string[]>;
	// NumLabel is a per-label-key map to values for numeric labels. See a note
	// above on handling multiple values for a label.
	NumLabel: Record<string, number[]>;
	// NumUnit is a per-label-key map to the unit names of corresponding numeric
	// label values. The unit info may be missing even if the label is in
	// NumLabel, see the docs in profile.proto for details. When the value is
	// slice is present and not nil, its length must be equal to the length of
	// the corresponding value slice in NumLabel.
	NumUnit: Record<string, string[]>;
}

interface Location {
	ID: number;
	Mapping: number;
	Address: number;
	Line: Line[];
	IsFolded: boolean;
}

interface Mapping {
	ID: number;
	Start: number;
	Limit: number;
	Offset: number;
	File: string;
	BuildID: string;
	HasFunctions: boolean;
	HasFilenames: boolean;
	HasLineNumbers: boolean;
	HasInlineFrames: boolean;

	// Name of the kernel relocation symbol ("_text" or "_stext"), extracted from File.
	// For linux kernel mappings generated by some tools, correct symbolization depends
	// on knowing which of the two possible relocation symbols was used for `Start`.
	// This is given to us as a suffix in `File` (e.g. "[kernel.kallsyms]_stext").
	//
	// Note, this public field is not persisted in the proto. For the purposes of
	// copying / merging / hashing profiles, it is considered subsumed by `File`.
	KernelRelocationSymbol: string;
}

interface Line {
	Function: number;
	Line: number;
	Column: number;
}

interface Func {
	ID: number;
	Name: string;
	SystemName: string;
	Filename: string;
	StartLine: number;
}
